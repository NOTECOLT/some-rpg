//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/UI/GameMenuAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameMenuAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameMenuAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameMenuAction"",
    ""maps"": [
        {
            ""name"": ""GameMenu"",
            ""id"": ""63724bb6-eed7-4306-a48e-8eaad9a833f8"",
            ""actions"": [
                {
                    ""name"": ""OpenGameMenu"",
                    ""type"": ""Button"",
                    ""id"": ""bdd0cb8c-3c83-4b0a-814f-f26935356225"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4295d45e-5e9e-496f-8ad5-86d774199043"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenGameMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameMenu
        m_GameMenu = asset.FindActionMap("GameMenu", throwIfNotFound: true);
        m_GameMenu_OpenGameMenu = m_GameMenu.FindAction("OpenGameMenu", throwIfNotFound: true);
    }

    ~@GameMenuAction()
    {
        UnityEngine.Debug.Assert(!m_GameMenu.enabled, "This will cause a leak and performance issues, GameMenuAction.GameMenu.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameMenu
    private readonly InputActionMap m_GameMenu;
    private List<IGameMenuActions> m_GameMenuActionsCallbackInterfaces = new List<IGameMenuActions>();
    private readonly InputAction m_GameMenu_OpenGameMenu;
    public struct GameMenuActions
    {
        private @GameMenuAction m_Wrapper;
        public GameMenuActions(@GameMenuAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenGameMenu => m_Wrapper.m_GameMenu_OpenGameMenu;
        public InputActionMap Get() { return m_Wrapper.m_GameMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameMenuActions set) { return set.Get(); }
        public void AddCallbacks(IGameMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_GameMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameMenuActionsCallbackInterfaces.Add(instance);
            @OpenGameMenu.started += instance.OnOpenGameMenu;
            @OpenGameMenu.performed += instance.OnOpenGameMenu;
            @OpenGameMenu.canceled += instance.OnOpenGameMenu;
        }

        private void UnregisterCallbacks(IGameMenuActions instance)
        {
            @OpenGameMenu.started -= instance.OnOpenGameMenu;
            @OpenGameMenu.performed -= instance.OnOpenGameMenu;
            @OpenGameMenu.canceled -= instance.OnOpenGameMenu;
        }

        public void RemoveCallbacks(IGameMenuActions instance)
        {
            if (m_Wrapper.m_GameMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_GameMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameMenuActions @GameMenu => new GameMenuActions(this);
    public interface IGameMenuActions
    {
        void OnOpenGameMenu(InputAction.CallbackContext context);
    }
}
